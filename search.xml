<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[snippet,让你编码效率翻倍]]></title>
    <url>%2F2018%2F09%2F14%2Fsnippet-%E8%AE%A9%E4%BD%A0%E7%BC%96%E7%A0%81%E6%95%88%E7%8E%87%E7%BF%BB%E5%80%8D%2F</url>
    <content type="text"><![CDATA[为什么谈到Snippet今天下午在用vscode做小程序的时候，发现很不方便，因为商店里提供的代码片段极为有限，而且平时几乎每天都需要用到代码片段，所以就在思考他们是怎么做到给别人提供代码的，我可以自定义代码片段吗。然后查了下，果然，这在vscode里自带的（好像藏得有点深），是可以自定义的，然后在做完自己的任务后捣鼓了下，基本了解了snippet的语法，突然有种打开新世界大门的感觉。做个记录，上菜了 如何打开snippet配置这里以vscode为例，其他编辑器大概也差不多。在vscode中快捷键「Ctrl + Shift + P」打开命令窗口，然后输入snippet,选择 [配置用户代码片段]，点击后，就可以愉快的进行片段的编写了 Snippet怎么用先上一个Demo123456789101112131415161718"html template": &#123; "prefix": "ht", "body": [ "&lt;!DOCTYPE html&gt;", "&lt;html lang=\"en\"&gt;", "&lt;head&gt;", " &lt;meta charset=\"UTF-8\"&gt;", " &lt;title&gt;$&#123;1:$CURRENT_DATE&#125;&lt;/title&gt;", "&lt;/head&gt;", "&lt;body&gt;", " &lt;div class=\"$&#123;2|container,wrapper|&#125;\"&gt;", " $&#123;3&#125;", " &lt;/div&gt;", "&lt;/body&gt;", "&lt;/html&gt;", ], "description": "create a html frame" &#125; 效果是这样滴 clipboard.png 基础结构 clipboard.png 片段名字 prefix（前缀，输入的触发条件，比如上面例子中当我输入ht后，就能tab出来片段） body（主体部分，在里面根据语法定义自己需要的代码片段） description（说明，片段的具体描述） 基础语法 每个逗号代表一整行的结束，双引号需要用转义字符 \ $number表示光标跳转的顺序，比如$1表示光标首次需要跳转的位置，相同序号的会在一起，另外$0表示最终光标位置 变量，在未赋值的情况下提供默认值，这里提供一些变量 12345678910111213141516171819202122TM_SELECTED_TEXT：当前选定的文本或空字符串； TM_CURRENT_LINE：当前行的内容；TM_CURRENT_WORD：光标所处单词或空字符串 TM_LINE_INDEX：行号（从零开始）；TM_LINE_NUMBER：行号（从一开始）；TM_FILENAME：当前文档的文件名；TM_FILENAME_BASE：当前文档的文件名（不含后缀名）；TM_DIRECTORY：当前文档所在目录；TM_FILEPATH：当前文档的完整文件路径；CLIPBOARD：当前剪贴板中内容。时间相关CURRENT_YEAR: 当前年份；CURRENT_YEAR_SHORT: 当前年份的后两位；CURRENT_MONTH: 格式化为两位数字的当前月份，如 02；CURRENT_MONTH_NAME: 当前月份的全称，如 July；CURRENT_MONTH_NAME_SHORT: 当前月份的简称，如 Jul；CURRENT_DATE: 当天月份第几天；CURRENT_DAY_NAME: 当天周几，如 Monday；CURRENT_DAY_NAME_SHORT: 当天周几的简称，如 Mon；CURRENT_HOUR: 当前小时（24 小时制）；CURRENT_MINUTE: 当前分钟；CURRENT_SECOND: 当前秒数。 可选项，当光标到该处的时候弹出一些可选择项，使用 | ，| 后面是自己提供的可选项 我这里是提供了两个值，值之间使用逗号进行分隔 body的高级语法，可以参考这里，写的很详细 最后效果 clipboard.png 最后附上把自己的snippet放到market上的教程，使劲戳这里]]></content>
  </entry>
  <entry>
    <title><![CDATA[git 协作开发笔记]]></title>
    <url>%2F2018%2F08%2F20%2Fgit-%E5%8D%8F%E4%BD%9C%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[fork项目，参与开发，fork后会在你的主页建立一个同名仓库； git clone 你fork的仓库地址 到本地 修改本地文件commit，push pr自己开始也是这样的，但是后面如果作者更新了，你这边还是原来的代码的话就跟不上进度，所以必须要同步其他人的进度 git remote add upstream 你fork项目的原始地址 （作用是保存项目地址通过upstream来代替，不需要每次都输入这个地址） git pull upstream 分支名 （拉取项目的最新代码到本地，保持同步） 编辑你自己的代码,commit,push 如果你需要合并自己的commit记录，可以使用git rebase -i head~3 (最近3次的提交记录) 按i进入插入模式然后可以根据提示编写commit，然后esc退出模式再按:wq退出保存 git push –force 提交代码 可以安安心心的pr了，然后等着merge或者rebase]]></content>
  </entry>
  <entry>
    <title><![CDATA[大学回忆录]]></title>
    <url>%2F2018%2F07%2F31%2F%E5%A4%A7%E5%AD%A6%E5%9B%9E%E5%BF%86%E5%BD%95%2F</url>
    <content type="text"><![CDATA[大学回忆录 &nbsp; &nbsp; 不知不觉就已经快8月份了，踩着7月的尾巴，时间过得很快，到现在都觉得高考好像刚刚昨天结束的样子。大学这三年，给了我很多美好的回忆，给了我很棒的室友，给了我值得去守护的人，很美好，我很开心。虽然面临着找实习的压力，但最后保留着的这点回忆却让现在的我很暖心。&nbsp; &nbsp; 还记得大一的时候，为了抢个前排听高数课，突发奇想想着赶紧买辆自行车，要早点赶去教室占位子，于是省吃俭用花了几百块钱买了辆自行车，自行车到了的时候，心里贼开心，自己花了半个小时组装，组装完还给他取了个名字“擎天柱”（哈哈，好蠢哦），开始第一天，嗯，骑车去了，但是没占到位置！为啥呢？因为人家前天晚上就去占好了。。。。好在爱学习得还不多，哈哈，默默的跑到中间去了，不过也还好，毕竟中间的位置，我现在都有种感觉正是因为自己坐了前排，所以大一整个学年的高数没挂，毕竟文科生的数学惨不忍睹。也不知道是自己膨胀了还是怎样，后面还帮别人复习去了（虽然他后面没过），哈哈哈。后面过完一个礼拜后，发现7点起床，不骑自行车，都有位置，于是，擎天柱，黯然退役，直至寒假回去被人扛走。大一也是比较忙碌的一年，课上个不停，没一点喘息的机会，对手机的依赖也不重（主要还是单身哈哈），所以回到寝室，到11点左右就能上床睡觉了，作息很好，11点全寝室的都能睡觉，现在想想，以前的自己真棒。毕竟现在都是夜猫子了，现在都快凌晨3点了，还在写着回忆录。那时的自己还暗恋了一个人，不过很怂，不敢说，然后，然后人家就有男朋友了。每天看到她笑，自己心里也会特别灿烂。然后一整天心情特别棒。很美好，每个暗恋过别人的人都懂这种感受的。还有一件比较疯狂的事，现在想想就特别想笑。冬天的某一个周末上午，没有温暖得阳光，反而，是妖风肆虐，我不知道是哪根筋抽了下，突然想去打球，但是吧，一个人又不想打，于是就随口问了下室友，不知道那天室友是不是也抽筋了，想都不想就跟着我走了，可能是荷尔蒙的原因，还穿的特别少，外面这温度跟风力。。。。三个人一下寝室楼就后悔出去了，但是又不想上去，于是硬着头皮就去了，到球场后，三个人开始活动筋骨，开始还好风力很小，但是半个小时后，风就变得好大，那刺骨的风呀。。。别提有多“舒服”，还好天虎带了件薄的羽绒服，于是三个人为了避寒，轮流穿一件薄薄的羽绒服，一边哆嗦一边拍着球，穿着衣服的人呢，就蜷缩着身子，笑着打球的人，然后轮流着穿那件薄羽绒服，风越来越大，到后面就索性三个人围在一件衣服这里取暖，哈哈哈。后面实在受不了了，就屁颠屁颠得跑回宿舍去了。后面这成了我们宿舍的一个梗，每当遇到点极端天气的时候，就会说“想当年，冬天12级风的时候，我们还在盘边操场打球呢。。。然后是一段吹牛史（！@#￥#！#）” 哈哈哈哈。大一还有很多趣事，篇幅原因，就不记录了，整体来说，整个大一过得很开心，无忧无虑，就跟个小朋友似的，无忧无虑！&nbsp; &nbsp; 就快三点半的，我真的得睡觉了，大二的事情，等某个有空的时间再来记录，睡觉了欧阳铖————记于2018年7月31号凌晨3点]]></content>
  </entry>
  <entry>
    <title><![CDATA[小程序模板的使用]]></title>
    <url>%2F2018%2F06%2F11%2F%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%A8%A1%E6%9D%BF%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[模板是什么？顾名思义，模板就是页面中可以套用的公共资源 有啥作用？减少重复代码，代码会更加简洁，不同的页面都可以使用模板，可以提升开发效率 怎么使用？ 模板定义：使用name作为模板名字 123&lt;template name="list-item"&gt;......内容........&lt;/template&gt; 模板使用:使用is=”name”,声明需要的使用的模板，然后将模板所需要的data传入 1&lt;template is="list-item" data="&#123;&#123;...item&#125;&#125;" /&gt; 引用： import有作用域概念，不能传递import.比如A中import B,B import C,这时A是不能使用C的 引用： 相当于直接拷贝模板中除template外的代码 数据传入渲染 使用…三个点展开数据 123&lt;view wx:for="&#123;&#123;result&#125;&#125;" wx:key="index" data-index="&#123;&#123;index&#125;&#125;"&gt; &lt;template is="list-item" data="&#123;&#123;...item&#125;&#125;" /&gt; &lt;/view&gt; 可以通过在外部加入一个父级view使用for循环，输出所有数据，并且通过绑定index，可以对每个项目进行操作]]></content>
  </entry>
  <entry>
    <title><![CDATA[小程序弹出菜单的实现]]></title>
    <url>%2F2018%2F06%2F11%2F%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%B9%E5%87%BA%E8%8F%9C%E5%8D%95%E7%9A%84%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[需求点击标签栏按钮，向下弹出菜单，再次点击，收回菜单 要解决的问题 标签栏三栏样式，标签栏固定不动； 点击标签栏弹出菜单，并且出现透明遮罩； 遮罩优先级在弹出框之下； 弹出框内标签的设置； 滚动栏滚动条的隐藏 如何解决？ 弹性布局，横向，三者平分整栏; 状态监听点击事件，数据控制hide或者show,通过rgba设置透明度 弹出框设置z-index； 弹性布局flex 横向排列 超出后wrap 然后space-around控制间距 ::-webkit-scrollbar {width: 0;height: 0;color: transparent;} 具体实现wxml 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&lt;import src="../../templates/template" /&gt;&lt;view class="container &#123;&#123;isMask?'mask':''&#125;&#125;"&gt; &lt;view class="header"&gt; &lt;view class="filterCity &#123;&#123;status=='1' &amp;&amp; isActive?'active':''&#125;&#125;" data-status='1' bindtap="changeStatus"&gt; &lt;view class="city"&gt;城市筛选&lt;/view&gt; &lt;image src="&#123;&#123;status=='1' &amp;&amp; isActive?'../../youzan-image/red-up.png':'../../youzan-image/down.png'&#125;&#125;" /&gt; &lt;/view&gt; &lt;view class="filterJob &#123;&#123;status=='2' &amp;&amp; isActive?'active':''&#125;&#125;" data-status='2' bindtap="changeStatus"&gt; &lt;view class="job"&gt;职位筛选&lt;/view&gt; &lt;image src="&#123;&#123;status=='2' &amp;&amp; isActive?'../../youzan-image/red-up.png':'../../youzan-image/down.png'&#125;&#125;" /&gt; &lt;/view&gt; &lt;view class="filterOrder &#123;&#123;status=='3'&amp;&amp; isActive?'active':''&#125;&#125;" data-status='3' bindtap="changeStatus"&gt; &lt;view class="order"&gt;排序方式&lt;/view&gt; &lt;image src="&#123;&#123;status=='3' &amp;&amp; isActive?'../../youzan-image/red-up.png':'../../youzan-image/down.png'&#125;&#125;" /&gt; &lt;/view&gt; &lt;/view&gt; &lt;block wx:if="&#123;&#123;isActive==true&amp;&amp;status=='1'&#125;&#125;"&gt; &lt;view class="cityContainer"&gt; &lt;block wx:for="&#123;&#123;city&#125;&#125;" wx:key="id" wx:for-index="index"&gt; &lt;view class="city &#123;&#123;isSelect&amp;&amp;index==curIndex?'select':''&#125;&#125;" data-index="&#123;&#123;index&#125;&#125;" bindtap="select"&gt;&#123;&#123;item&#125;&#125;&lt;/view&gt; &lt;/block&gt; &lt;/view&gt; &lt;/block&gt; &lt;block wx:if="&#123;&#123;isActive==true&amp;&amp;status=='2'&#125;&#125;"&gt; &lt;scroll-view scroll-y="true" class="posContainer"&gt; &lt;block wx:for="&#123;&#123;cur&#125;&#125;" data-index='index' wx:for-index='index' wx:key="index"&gt; &lt;view class="title"&gt;&#123;&#123;item.title&#125;&#125;&lt;/view&gt; &lt;view class="poscontent"&gt; &lt;view wx:for="&#123;&#123;item.types&#125;&#125;" wx:for-item="type" wx:key='id' wx:for-index="&#123;&#123;index&#125;&#125;" data-index="&#123;&#123;index&#125;&#125;"&gt; &lt;view class="tag &#123;&#123;isSelect&amp;&amp;index==curIndex?'select':''&#125;&#125;" data-id="&#123;&#123;id&#125;&#125;" bindtap="multiSelect"&gt;&#123;&#123;type&#125;&#125;&lt;/view&gt; &lt;/view&gt; &lt;/view&gt; &lt;/block&gt; &lt;view class="confirm"&gt; &lt;button class="weui-btn" type="warn"&gt;确认&lt;/button&gt; &lt;/view&gt; &lt;/scroll-view&gt; &lt;/block&gt; &lt;block wx:if="&#123;&#123;isActive==true&amp;&amp;status=='3'&#125;&#125;"&gt; &lt;view class="orderContainer"&gt; &lt;view class="block"&gt;智能排序&lt;/view&gt; &lt;view class="block"&gt;时间排序&lt;/view&gt; &lt;view class="block"&gt;薪资排序&lt;/view&gt; &lt;/view&gt; &lt;/block&gt; &lt;view class="listContainer" &gt; &lt;view wx:for="&#123;&#123;jobList&#125;&#125;" wx:key="index" data-index="&#123;&#123;index&#125;&#125;"&gt; &lt;template is="list-item" data="&#123;&#123;...item&#125;&#125;" /&gt; &lt;/view&gt; &lt;/view&gt; &lt;view class="search " bindtap="search"&gt; &lt;image src="../../youzan-image/search.png" /&gt; &lt;text&gt;搜索&lt;/text&gt; &lt;/view&gt;&lt;/view&gt; wxss 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196page &#123; position: relative; width: 100%; height: 100vh;&#125;.header &#123; width: 100%; height: 80rpx; position: fixed; top: 0; display: flex; flex-direction: row; justify-content: space-between; text-align: center; color: #313131; font-size: 16px; border-bottom: 1rpx solid #eeeeee; z-index: 9999; background-color: #fff;&#125;.filterCity &#123; flex: 1; position: relative; height: 80rpx; line-height: 80rpx;&#125;.filterJob &#123; position: relative; flex: 1; height: 80rpx; line-height: 80rpx;&#125;.filterOrder &#123; position: relative; flex: 1; height: 80rpx; line-height: 80rpx;&#125;.header image &#123; position: absolute; right: 15rpx; top: 26rpx; width: 30rpx; height: 30rpx;&#125;.active &#123; color: #ef0001;&#125;.mask &#123; width: 100%; height: 100%; position: fixed; top: 80rpx; background-color: rgba(15, 15, 26, 0.3);&#125;.cityContainer &#123; display: flex; flex-direction: row; justify-content: space-around; align-items: space-between; flex-wrap: wrap; width: 100%; height: 300rpx; z-index: 999; background-color: #fff; border-bottom: 1rpx solid #e9e9e9; padding-bottom: 130rpx;&#125;.cityContainer .city &#123; display: block; font-size: 15px; margin-top: 100rpx; width: 150rpx; height: 50rpx; line-height: 50rpx; text-align: center; border: 1rpx solid #e9e9e9; overflow: hidden;&#125;.select &#123; color: #ffffff; background-color: #ed0000;&#125;.posContainer &#123; height: 980rpx; width: 100%; background-color: #fff; /* overflow:auto; */&#125;::-webkit-scrollbar &#123; width: 0; height: 0; color: transparent;&#125;.title &#123; margin-top: 55rpx; font-size: 15px; margin-left: 28rpx;&#125;.poscontent &#123; width: 100%; display: flex; flex-direction: row; justify-content: flex-start; flex-wrap: wrap; margin-top: -15rpx;&#125;.tag &#123; margin-left: 28rpx; margin-top: 23rpx; font-size: 13px; width: 150rpx; height: 50rpx; line-height: 50rpx; text-align: center; border: 1rpx solid #e9e9e9;&#125;.confirm &#123; width: 100%; height: 150rpx; border: 1rpx solid transparent; background-color: #fff;&#125;.weui-btn &#123; position: fixed; width: 95%; bottom: 52rpx; left: 50%; transform: translateX(-50%);&#125;.orderContainer &#123; display: flex; flex-direction: row; justify-content: space-around; align-items: center; background-color: #fff; width: 100%; height: 125rpx;&#125;.block &#123; font-size: 13px; width: 200rpx; height: 50rpx; line-height: 50rpx; text-align: center; border: 1rpx solid #e9e9e9;&#125;.search &#123; position: fixed; bottom: 80rpx; background-color: #fff; right: 25rpx; width: 150rpx; height: 75rpx; line-height: 75rpx; text-align: center; border-radius: 35rpx; box-shadow: 1rpx 1rpx 7rpx 7rpx #f5f5f5;&#125;.search image &#123; width: 30rpx; height: 30rpx;&#125;.search text &#123; font-size: 15px; padding-left: 9rpx; color: #666666;&#125;.listContainer &#123; width: 100%; height: 100%; margin-top: 80rpx;&#125; js 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859import category from '../../api/employ'import jobList from '../../api/detail'Page(&#123; data: &#123; curIndex: '', isActive: false, jobList:[], cur: [], job: [], isShow: true, status: 0, isMask: false, isSelect: false, city: ['全国', '杭州', '北京', '深圳', '上海', '广州', '武汉', '重庆'] &#125;, changeStatus(e) &#123; let status = e.currentTarget.dataset.status; let cur = category; this.setData(&#123; isActive: !this.data.isActive, status: status, isMask: !this.data.isMask, cur: cur, &#125;) &#125;, select(e) &#123; let curIndex = e.currentTarget.dataset.index; this.setData(&#123; isSelect: " curIndex == this.data.curIndex ? '!this.data.isActive' : 'true' ", isActive: false, isMask:false, curIndex: curIndex, &#125;) &#125;, multiSelect(e)&#123; let multiIndex=e.currentTarget.dataset.index; this.setData(&#123; isSelect:!this.data.isSelect, curIndex:multiIndex &#125;) &#125;, search(e) &#123; wx.navigateTo(&#123; url: '../search/search', &#125;) &#125;, onLoad: function (e) &#123; this.setData(&#123; jobList:jobList &#125;) &#125;, click:function (e) &#123; let id =e.currentTarget.dataset.id; wx.navigateTo(&#123; url: `../detail/detail?id=$&#123;id&#125;`, &#125;) &#125;&#125;)]]></content>
  </entry>
  <entry>
    <title><![CDATA[小程序收藏功能实现]]></title>
    <url>%2F2018%2F06%2F11%2F%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%94%B6%E8%97%8F%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[需求点击收藏后显示已收藏，在另一个页面出现目前点击收藏的项目 需要解决的问题 点击收藏后需要显示已收藏，并且文字状态改变 另一个页面如何知道你点击了收藏，并且获得你点击收藏的数据 如何解决？ 数据状态绑定，并且由状态控制样式（三元运算符） 缓存（setStorageSync,getStorageSync）,点击页面设置缓存（数据的id），显示页面获取缓存，通过获得缓存id，将整个数据中的获得的id那一项，取出，放入新的数组具体实现wxml 12&lt;image class="save " src="&#123;&#123;isClick?'../../youzan-image/save-s.png':'../../youzan-image/save.png'&#125;&#125;" bindtap="haveSave"&gt;&lt;/image&gt; &lt;text class="saveText"&gt;&#123;&#123;isClick?'已收藏':'收藏'&#125;&#125;&lt;/text&gt; 点击页面js123456789101112131415161718192021222324252627282930Page(&#123; data: &#123; job: [], jobList: [], id: '', isClick: false, jobStorage: [], jobId: '' &#125;, haveSave(e) &#123; if (!this.data.isClick == true) &#123; let jobData = this.data.jobStorage; jobData.push(&#123; jobid: jobData.length, id: this.data.job.id &#125;) wx.setStorageSync('jobData', jobData);//设置缓存 wx.showToast(&#123; title: '已收藏', &#125;); &#125; else &#123; wx.showToast(&#123; title: '已取消收藏', &#125;); &#125; this.setData(&#123; isClick: !this.data.isClick &#125;) &#125;&#125;) 显示页面js 12345678910111213141516171819202122import jobList from '../../api/detail'Page(&#123; data: &#123; id:'', job:[], savejob:[], &#125;, onLoad: function (options) &#123; console.log(wx.getStorageSync('jobData')); let savejob = wx.getStorageSync('jobData')//获得缓存 let index = savejob.length-1; console.log(savejob[index].id); let jobid = savejob[index].id let temp= jobList[jobid] //将获得缓存后匹配的数据放入新的数组 let job= []; job.push(temp); this.setData(&#123; id:index, job: job, &#125;) &#125;,&#125;)]]></content>
  </entry>
  <entry>
    <title><![CDATA[小程序折叠与展开文章的的实现]]></title>
    <url>%2F2018%2F06%2F10%2F%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%98%E5%8F%A0%E4%B8%8E%E5%B1%95%E5%BC%80%E6%96%87%E7%AB%A0%E7%9A%84%E7%9A%84%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[需求页面折叠超出的的部分显示省略号，点击展开后显示全部内容 需要解决的问题 箭头随展开折叠后箭头方向的变化 当点击箭头文本显示内容的变化 如何解决？ 箭头方向的变化是一个点击事件bindtap,点击后更换小图标； 文本变化是一个show或者hide的事情，折叠的时候有个多行文本溢出得问题五个属性（display: -webkit-box，-webkit-box-orient: vertical， -webkit-line-clamp，text-overflow，overflow） 状态与数据绑定控制样式 具体实现wxml12345678910111213141516171819&lt;view class="company-detail"&gt; &lt;view class="company-detail-content"&gt; &lt;view class="weui-loadmore weui-loadmore_line"&gt; &lt;view class="weui-loadmore__tips weui-loadmore__tips_in-line"&gt;公司介绍&lt;/view&gt; &lt;/view&gt; &lt;view class="long-dec &#123;&#123;isFold?'hide':'show'&#125;&#125;"&gt; &lt;text class="first-dec"&gt; 创业是个失败概率很大的事情，我们很高兴从2012底到现在还活着， 而且还活的很不错。 目前有赞旗下的产品有：有赞微商城、有赞收银、有赞零售、有赞美业、有赞批发、有赞买家版、有赞微小店. &lt;/text&gt; &lt;text class="second-dec"&gt; 我们认为，相比较业务来说，团队才是公司的核心。有赞没有“员工”只有“小伙伴”，也没有人姓“公”名“司”，我们有一群聪明、有要性、又皮实的伙伴，这才是我们最大的资产。 &lt;/text&gt; &lt;text class="last-dec"&gt; 有赞的小伙伴目前已超过1000人，工程师比例占55%，我们有很浓的工程师氛围，每周都有很多的有意思的分享：有出国旅游的分享、有如何搭讪的分享、有如何装修房子的分享...技术分享更是数不胜数。 我们的工作不是很轻松，但我们的氛围很轻松，很open，公司里随处可见骑着独轮车来回跑的工程师、懒人沙发、午睡吊篮、复古电话亭等等，每个月都有节日、新人表演、拓展、派对等，对我们来说，天天都可以是节日。我们倡导简单直接的沟通方式，希望做一家通透的公司。这里并没有过多的等级划分，你可以随时提出自己的意见和任何人PK。福利方面我们全额缴纳五险一金，每月980元的有赞E卡鼓励大家一起吃喝玩乐。工程师标配MacBookPro、大屏显示器和机械键盘。办公室里常备零食、水果，休息区有电视、游戏机、桌球、乒乓球、四驱赛车、桌游随时供大家放松减压。每天晚下班的打车费报销，每年给你和你的家人提供旅游和体检等等。 &lt;/text&gt; &lt;/view&gt; &lt;image class="arrow" src=" &#123;&#123;isFold?'../../youzan-image/down.png':'../../youzan-image/up.png'&#125;&#125;" bindtap="showAll"&gt;&lt;/image&gt; &lt;/view&gt;&lt;/view&gt; wxss 1234567891011121314151617181920212223242526.long-dec&#123; padding-left: 20rpx; margin-top: -87rpx; display: -webkit-box;/*关键属性*/ font-size:28rpx; color:#cfcfd0; line-height: 40rpx; word-break: break-all; -webkit-box-orient: vertical;/* 关键属性 */ -webkit-line-clamp:6;/* 关键属性 */ overflow: hidden;/* 关键属性 */ text-overflow:ellipsis;/* 超出内容显示省略号*/&#125;.hide&#123; display: -webkit-box;&#125;.show&#123; display: block;&#125;.arrow&#123; position: absolute; width: 40rpx; height: 43rpx; left: 50%; transform: translate(-50%);&#125; js 123456789Page(&#123; data: &#123; isFold: true, &#125;,showAll: function (e) &#123; this.setData(&#123; isFold: !this.data.isFold, &#125;) &#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[小程序实现长按删除功能]]></title>
    <url>%2F2018%2F05%2F18%2F%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0%E9%95%BF%E6%8C%89%E5%88%A0%E9%99%A4%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[小程序实现长按删除图片 说明 最近在学小程序,遇到长按图片删除的问题,特此记录,记录自己的成长轨迹 需求: 长按删除指定图片 需要解决的问题 长按事件如何表示出来? 如何获取当前长按元素的下标? 如何删除元素? 解决办法 长按事件是用bindlongpress(不会跟点击事件bindtap冲突); 在wxml中添加索引index,然后在js中用currentTarget.dataset.index获取当前元素下标 通过splice方法删除splice(index,1),删除一个当前元素 具体实现 1234567&lt;view class="uploader__files"&gt; &lt;block wx:for="&#123;&#123;images&#125;&#125;" wx:key="&#123;&#123;item.id&#125;&#125;" &gt; &lt;view class="uploader__file" bindlongpress="deleteImage" data-index="&#123;&#123;index&#125;&#125;"&gt; &lt;image mode="aspectFill" class="uploader__img" src="&#123;&#123;item.path&#125;&#125;" /&gt; &lt;/view&gt; &lt;/block&gt;&lt;/view&gt; 在wxml中添加 bindlongpress=”deleteImage” data-index=”“ 来绑定事件并添加索引index 123456789101112131415161718192021deleteImage: function (e) &#123; var that = this; var images = that.data.images; var index = e.currentTarget.dataset.index;//获取当前长按图片下标 wx.showModal(&#123; title: '提示', content: '确定要删除此图片吗？', success: function (res) &#123; if (res.confirm) &#123; console.log('点击确定了'); images.splice(index, 1); &#125; else if (res.cancel) &#123; console.log('点击取消了'); return false; &#125; that.setData(&#123; images &#125;); &#125; &#125;) &#125; 删除部分的代码 注意currentTarget与target的区别 currentTarget:绑定的事件当前元素及其子元素都会触发 target: 绑定的事件 子元素不会被触发事件 效果展示]]></content>
  </entry>
  <entry>
    <title><![CDATA[由两道题扩展的对作用域,作用域链,闭包,立即执行函数,匿名函数的认识总结]]></title>
    <url>%2F2018%2F04%2F23%2F%E7%94%B1%E4%B8%A4%E9%81%93%E9%A2%98%E6%89%A9%E5%B1%95%E7%9A%84%E5%AF%B9%E4%BD%9C%E7%94%A8%E5%9F%9F-%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE-%E9%97%AD%E5%8C%85-%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E7%9A%84%E8%AE%A4%E8%AF%86%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[前言最近在学JS,前几天看到两道题,刚开始看懵懵懂懂,这几天通过各种查资料,慢慢的理解,顿悟了,对匿名函数,闭包,立即执行函数的理解也更深了一点,在此分享给大家我的理解与总结,希望能帮助大家理解.因为这篇文章是我用心总结的,查阅了很多的资料,所以总结的比较细,篇幅较长,如果没耐心,建议跳出,点个收藏,以后如果要用到,有耐心想看时,方便查阅.另外如果有啥错误,还望指正 题目一12345678910function fn() &#123; for (var i = 0; i &lt; 2; i++) &#123; var variate = i; setTimeout(function () &#123; console.log("setTimeout执行后:" + variate); &#125;, 1000); &#125; console.log(i); &#125; fn(); 最后结果是啥呢? 结果是,先打印2,再打印2个1为什么呢?先来梳理下函数执行过程: 首先for循环遍历i,(0,1)的时候分别将遍历值传给variate变量,variate变量最后保存的值为1 当i值为2时,指针跳出循环,执行到打印i值这步,此时i=2 执行函数fn(),执行完毕后,触发setTimeout事件,因为循环2次,而且最后保存在这个作用域中变量的值为1,所以最后输出2个1 所以最后的打印的值为2,1,1 分析完了,先不急,我们先来了解下setTimeout事件 setTimeout事件 setTimeout事件有两个参数:事件,时间开始执行时间 setTimeout事件是异步的 当调用setTimeout事件时，会把函数参数，放到事件队列中。等主程序运行完，再调用 理解这个后,答案就很容易得出了 题目二1234567891011121314function fn() &#123; for (var i = 0; i &lt; 2; i++) &#123; (function () &#123; var variate = i; setTimeout(function () &#123; alert(variate); &#125;, 1000); &#125;)(); &#125; console.log(i); console.log(variate); &#125; fn(); 先分析下整体结构:函数体内包含一个for循环体,循环体内又包含一个匿名函数,形成闭包,加上两个小括号–&gt;(匿名函数)()形成立即执行函数 再思考下函数执行过程 i=0时,进入函数体内,因为是立即执行,所以i值进入匿名函数,通过作用域链,变量variate获得i值,匿名函数体内的setTimeout中的变量variate获得i值,第一轮循环结束; i=1时,执行与1同样的过程; i=2,跳出循环,打印i,variate; 结果是啥呢? Excuse me?竟然有错误? 好,那就让我们来解决错误,错误显示variate is not defined,原来是这样,没定义,那分析一波,为什么会显示未定义呢?首先我们看函数内部,内部已经定义了,所以我们想到作用域的问题 作用域和作用域链 作用域 变量和函数的访问区域,分全局作用域和函数作用域,在es6中添加let关键字后有了块级作用域概念. 变量提升: JS在解析代码前会先将所有函数体内的变量,提升至函数体顶端,来看个例子 12345678var Gscope = "global"; function t() &#123; var Gscope; console.log("这是全局变量:"+Gscope);//这是全局变量:undefined Lscope = "local"; console.log("这是局部变量"+Lscope);//这是局部变量local &#125; t(); 为什么第一个值为undefined?因为函数体内的Gscope变量被提升至函数体顶端,但是未赋值,so,undefined. let关键字:let用于声明变量,但是let声明的变量只在let所在的代码块(块级作用域)有用,OK,show code 12345for (let i = 0; i &lt; 2; i++) &#123; let i = 'a'; console.log(i);//a a &#125; console.log(i);//i is not defined 作用域链 什么是作用域链？有什么用途?怎么创建起来的? 先引用一句高级程序设计里的话: 作用域链本质上是一个指向变量对象的指针列表,它只引用但不实际包含变量对象 我的理解是: 作用域链就相当于是沟通执行环境内的各个变量与函数的桥梁,通过作用域链,同一执行环境里面的变量和函数都有权利访问对方; 那不同的执行环境间是怎样的呢? 不同执行环境间的交流还是通过桥梁(作用域链),但是现在桥梁变成单行道了,只能允许内部环境访问外部环境,但外部环境不能访问内部环境.内部环境通过桥梁能够向上搜索查询变量和函数,但外部却不能向下搜索进入另一个执行环境.理解这个后,出现题目二的问题,variate is not defined,就很容易理解了: 因为他们两个压根不在同一个执行环境,而且,里面的变量对象通过闭包能够访问外部环境变量,但外部环境变量无权访问内部的变量variate. 这时可能又蹦出一个问题了,”桥梁”(执行环境的作用域链)怎么搭建起来的呢? 先创建一个预先包含全局变量对象的作用域链,保存在内部的[scope]属性中 调用函数时,为函数搭建一个执行环境 复制函数的[scope]中的对象构建起执行环境的作用域链 创建活动对象,并将活动对象推入执行环境的前端 分析完后,再重新阅读下作用域的概念,会发现很有道理! 闭包首先提出几个问题:什么是闭包? 为什么要用它?它有啥缺点?怎么创建? 什么是闭包? 闭包是指有权访问另一个函数作用域中变量的函数 先贴上刚刚那一段代码 1234567891011121314function fn() &#123; for (var i = 0; i &lt; 2; i++) &#123; (function () &#123; var variate = i; setTimeout(function () &#123; console.log("setTimeout执行后:"+variate); &#125;, 1000); &#125;)();//闭包,立即执行函数,匿名函数 &#125; console.log(i);//2 console.log(variate);//variate is not defined &#125; fn(); 通过定义可以知道,闭包本质还是作用域链的问题.那为什么内部环境能访问外部环境呢?那就先探讨下,函数调用时会发生什么吧! 先创建执行环境和作用域链; 初始化函数的活动对象(命名参数值,arguments); 在作用链中搜索具有相应名字的变量,实现对变量的读取和写入; 调用执行完毕,销毁局部活动对象,仅保存全局作用域.所以关键还是内部函数作用域链将外部的活动对象添加到自己作用域中了 这个例子中函数fn()内部嵌套了一个匿名函数形成闭包,内部的variate变量变为私有成员变量,所以外部无法访问,因而会报错variate is not defined 为什么用闭包? 因为在闭包内部保持了对外部活动对象的访问,但外部的变量却无法直接访问内部,避免了全局污染; 可以当做私有成员,弥补了因js语法带来的面向对象编程的不足; 可以长久的在内存中保存一个自己想要保存的变量. 闭包有啥缺点呢? 可能导致内存占用过多,因为闭包携带了自身的函数作用域 闭包只能取得外部包含函数中得最后一个值 怎么创建闭包?在函数内部嵌套使用函数 匿名函数什么是匿名函数?顾名思义,就是没有名字的函数如例子中的代码就是一个匿名函数 123456function () &#123; var variate = i; setTimeout(function () &#123; console.log("setTimeout执行后:"+variate); &#125;, 1000); &#125; 匿名函数优缺点?优点:可以通过var关键字创建函数表达式,函数表达式不会出现变量提升的情况,只有在真正被解释执行的时候才会执行到函数表达式所在的代码行,有效避免了全局污染; 缺点:匿名函数绑定的事件不能解绑 立即执行函数什么是立即执行函数?有什么作用? 什么是立即执行函数? 声明一个匿名函数,并且马上调用它{通过加()的形式} 立即执行函数的形式 (匿名函数)(); 123456(function () &#123; var variate = i; setTimeout(function () &#123; console.log("setTimeout执行后:"+variate); &#125;, 1000); &#125;)() 为什么要用小括号将匿名函数包裹起来? 为了通过浏览器的语法检查 作用?创建一个独立的作用域,避免全局污染 小结通过两道题扩展出来知识点,并且总结出来,现在对知识点的基础概念,以及一些实现原理有了很清晰的认识,这种感觉很棒]]></content>
  </entry>
  <entry>
    <title><![CDATA[小丸子成长记]]></title>
    <url>%2F2018%2F04%2F20%2F%E5%B0%8F%E4%B8%B8%E5%AD%90%E6%88%90%E9%95%BF%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[程序员没有对象怎么办?答: new 一个呀但是如果没妹妹呢? 答: 母猴子生一个呀 哈哈哈,那么怎么用stylus打造一个天真无邪的小丸子呢? 最后效果(一直有种错觉这是旺仔???) 准备工作 npm安装stylus—-&gt;npm install -g stylus 在项目目录下新建wanzi.css,wanzi.styl和index,并在html上引入wanzi.css 命令行切换至项目目录启动live-server实时刷新 –&gt;live-server启动stylus,监视wanzi.styl—&gt;stylus -w wanzi.styl 构造小丸子整体结构先分析下小丸子的构造,小丸子长了: 1张脸 头发 脖子 身子,身子上穿了衣服 腰上有皮带 两只手 两条腿,穿了红裙子 脚,穿了红鞋 所以总体结构就是 脸的构造先设置基础样式 123456789101112131415161718192021222324base-color = #152131body font-size 20pxbody, div margin 0 padding 0 background #ffef5e.border border 1px solid base-color.main position relative width 1000px height 1000px margin 50px auto.wanzi position absolute top 250px left 100px z-index 10 脸上有眼睛,耳朵,眉毛,酒窝,还有樱桃嘴.所以可以看出都是嵌套关系,在stylus中表现为 脸部基础样式 123456789.face background #fbdac7 width 126px height 113px position absolute border 1px solid #000 top 0 left 20% border-radius 18px 40px 80px 80px 眉毛实现原理:设置width,height确定眉毛长度,border-radius确定圆化程度,transform:rotate()确定眉毛摆放倾斜程度 1234567891011121314.brow width 37px height 3px background base-color position absolute top 31px border-radius 50% &amp;.left-brow left 13px transform: rotate(-13deg) &amp;.right-brow right 13px transform: rotate(13deg) 眼睛 实现:将盒子用border-radius圆化四角,形成圆形,width和height影响眼睛大小,形状 12345678910111213.eye width 13px height 13px border-radius: 50% background #000000 position absolute top 45px z-index 2 &amp;.left-eye left 30% &amp;.right-eye right 30% 耳朵实现原理:设置border-radius,width和height影响耳朵大小,形状 1234567891011121314.ear width 17px height 26px position absolute top 30px background-color #fbdac7 z-index 2 &amp;.left-ear left -10% border-radius: 40% 0 0 69% &amp;.right-ear right -10% border-radius 0 40% 69% 0 酒窝 实现原理:设置border-radius,width和height影响酒窝大小,形状 12345678910111213.blusher width 14px height 14px border-radius 50% background-color #f79c99 position absolute top 77px z-index 2 &amp;.left-blusher left 9% &amp;.right-blusher right 9% 嘴巴 实现原理:使用圆角border-radius将盒子弄圆,通过定义伪元素after后的样式,将伪元素背景颜色设置成脸部颜色,达到遮住嘴巴盒子上部分的效果,形成嘴巴的形状 12345678910111213141516171819.mouth width 30px height 27px border-radius:79% border: 1px solid #000 background-color #e77072 position absolute top 62px left 38% z-index 1 &amp;:after content '' /* 必须要有content属性*/ width 32px height 25px position absolute top -9px left -1px background-color #fbdac7 锯齿头发构造实现:通过transform:skew()将盒子变成平行四边形,然后通过rotate()将平行四边形旋转至角朝下,再通过位置调整,调整头发位置 12345678910111213141516171819202122232425262728.hair width 35px height 45px background base-color position absolute z-index 1 transform rotate(70deg) scale(1) skew(44deg) translate(8px) &amp;.hair1 top 17px left 27px &amp;.hair2 top 8px left 52px &amp;.hair3 top 4px left 73px &amp;.hair4 top 0 left 90px &amp;.hair5 top 4px left 108px &amp;.hair6 top 8px left 125px &amp;.hair7 top 17px right 17px 脖子123456789.neck width 20px height 7px border 1px solid #000 background-color #fbdac7 position absolute top 113px left 53px z-index 1 衣服整体分析:衣服有衣领,背带,怎么让背带跟衣领完整的显示在衣服中,不超过衣服盒子? 实现:通过在衣服盒子里设置overflow:hidden,隐藏超出盒子部分的元素,再通过z-index调整显示次序,遮住被衣领盖住的背带部分 衣领实现:tranform:rotate()旋转至合适位置 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849.clothes width 130px height 130px position absolute border: 1px solid #000 background-color #ffffff border-radius 36% 36% 0 0 overflow hidden top 121px z-index 10 .collar /*衣领*/ width 10px height 25px position absolute border: 1px solid #000 background-color #fff top -8px z-index 4 &amp;.left-collar left 35% transform rotate(-40deg) &amp;.right-collar right 35% transform rotate(40deg) .straps /*背带*/ width 10px height 120px position absolute background-color #f7003b border: 1px solid #000 top 0 z-index 3 &amp;.left-straps left 28% &amp;.right-straps right 28% .belt /*腰带*/ width 130px height 10px position absolute background-color #f7003b border: 1px solid #000 top 119px z-index 3 双手构造实现原理:实际上是两个不同颜色的椭圆,通过显示次序z-index达到层叠的效果,最后只露两边 123456789101112131415161718192021.arm-inside height 116px width 156px position absolute border: 1px solid #000 background-color #ffef5e border-radius 61% top 136px left -13px z-index 1 .arm-outside height 139px width 181px position absolute border: 1px solid #000 background-color #fff border-radius 75% top 122px left -25px 裙子构造实现:通过border-radius将裙子下摆削圆,width增加裙子宽度,再通过border-width放大下摆,最设置transparent,实现效果裙子皱纹的实现:先定义一个基线line,其他线再根据基线进行rotate(),再稍微移一下位置,实现摆放 1234567891011121314151617181920212223242526272829303132333435363738.skirt border-color: #e9003a transparent border-style: solid border-width: 0px 57px 90px; left: -57px; position: absolute top: 251px width: 132px z-index: 5 border-radius: 0 0 50% 50% .line width 2px height 44px background-color #000000 position absolute top 23px left 64px transform-origin 0 0 &amp;.line1 transform rotate(20deg) left 11% &amp;.line2 transform rotate(8deg) left 30% &amp;.line3 transform rotate(0deg) &amp;.line4 transform rotate(-8deg) left 68% &amp;.line5 transform rotate(-20deg) left 89% 大腿构造12345678910111213.leg width 20px height 60px position absolute border 1px solid #000 background-color #fadbc7 top 333px z-index 4 &amp;.left-leg left 32px &amp;.right-leg left 80px 袜子构造实现: 由两部分组成foot和sock,sock部分设置下边框不显示,foot部分通过rotate()完成脚方向的设定 1234567891011121314151617181920212223242526272829303132333435.sock width 20px height 28px position absolute background #ffffff border-style solid border-width 1px 1px 0px 1px border-color #000000 top 370px z-index 4 &amp;.left-sock left 32px &amp;.right-sock left 80px .foot width 48px height 23px position absolute background-color #ffffff border: 1px solid #000 border-radius: 80% top 383px transform-origin 0 0 z-index 3 &amp;.left-foot transform rotate(-24deg) top 405px left 2px &amp;.right-foot transform rotate(24deg) left 86px 鞋构造实现:类似foot,rotate() 12345678910111213141516171819.shoe width 67px height 34px position absolute background-color #a23030 border-radius: 80% top 383px transform-origin 0 0 z-index 2 &amp;.left-shoe transform rotate(-24deg) top 409px left -14px &amp;.right-shoe transform rotate(24deg) left 86px 总结使用stylus,大大提高了效率,非常nice!]]></content>
  </entry>
</search>
